
/*
 * adatree.h - Parse tree definitions for ADA language
 *
 * S.H.Smith, 23-Sep-86
 *
 */


/* parse tree node types */
/* this enumeration must also hold all token DEFINES generated by yacc */

typedef enum
{
   BLOCK_NODE,      /* a block of statements */

   ASSIGN_NODE,     /* an assignment */
     OP_STORE,

   EXPR_NODE,       /* an expression or subexpression */
     OP_LIT,
     OP_LOAD,          /* expression node operators */
     OP_ADD,
     OP_SUB,
     OP_MUL,
     OP_DIV,
     OP_MOD,
     OP_REM,
     OP_EXP,
     OP_ABS,
     OP_NEG,
     OP_CAT,
     OP_NOT,
     OP_EQ,
     OP_NE,
     OP_LT,
     OP_LE,
     OP_GT,
     OP_GE,

   DECL_NODE        /* a declaration */

} node_types;



#define MAXCHILD 5    /* maximum number of children nodes in any single
                         parse tree node */

/* a parse tree node */
typedef struct tree
{
   node_types code;                /* the type of this parse node
                                      (could also be a Yacc token code) */

   symbol *sym;                    /* a symbol table entry, where needed */

   int children;                   /* count of child nodes */
   struct tree *child[MAXCHILD];   /* links to children nodes, where needed */

   union {
      int    i;
      double d;                    /* values of literals */
      char   *s;
   } value;

} tree;



/* tree manipulation macros and functions */

tree *make_tree();

