
		RATIONALE FOR MAJOR CHANGES TO UNZIP20

12/12/89
C. Mascott

1.  Shannon-Fano trees

	The Shannon-Fano table has been replaced by a Shannon-Fano
binary decoding tree because it runs faster and the implementation
is simpler.

2.  No pre-allocation of output file space

	Under UNIX you can't pre-allocate file space by seeking
to what will later be the end-of-file position and writing one
byte: this allocates only one block.

3.  Buffered input

	UNIX (and probably DOS) i/o is faster if all i/o starts on
a block boundary and is in multiples of the block size.

4.  Typedefs

	On a 32-bit processor some of the typedefs produced
items that were either the wrong size (e.g., word was 32 bits
instead of 16) or unnecessarily large (e.g., hsize_array_integer
was 32 bits instead of 16), so 'short' was added to these
typedefs.  This should be OK with most (if not all) DOS compilers:
shorts are almost always 16 bits.

5.  Overlapped storage

	Different compression methods now overlap their large data
requirements.  The total data size is now well under 64K, so that
the small memory model may now be used under DOS.

6.  Insertion sort in SortLengths

	The distance and length arrays are already nearly sorted.
The literals array is not, but many files don't have a literals
array.  Simple sorts like insertion sort and selection sort are
actually faster on nearly-sorted data than more complex sorts
like Shell sort and quicksort.

7.  Zipfile header struct definitions

	The previous struct definitions, with longint fields,
were not working on an 80386 machine.  The compiler was padding
the struct so that longints started on 4-byte boundaries for
efficient access.  The new struct definitions don't give the
compiler any reason to pad the structs.
