
/*
 * Copyright 1987, 1989 Samuel H. Smith;  All rights reserved
 *
 * This is a component of the ProDoor System.
 * Do not distribute modified versions without my permission.
 * Do not remove or alter this notice or any other copyright notice.
 * If you use this in your own program you must distribute source code.
 * Do not use any of this in a commercial product.
 *
 * This version mutated for Unix by John Cowan <cowan@magpie.masa.com>.
 * Basic changes: reverted to pre-ANSI headers in source code
 *                sent error messages to stderr
 *                exit with 1 on error
 *                removed references to MS-DOS time (rather than converting)
 *                added -c switch to print to console (PKUNZIP-compatible)
 *                added -v switch to print directory (same switch, different fmt)
 *               can specify components to be processed (in either case)
 */

/*
 * UnZip - A simple zipfile extract utility
 *
 */

#define version  "UnZip:  Zipfile Extract v1.1a of 03-06-89;  (C) 1989 S.H.Smith"

typedef unsigned char	byte;
typedef long	longint;
typedef unsigned short	word;
typedef char	boolean;
#define STRSIZ  256

#include <stdio.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <ctype.h>
#include <string.h>

#define SEEK_CUR 1	/* Unix doesn't have names yet */



/* ----------------------------------------------------------- */
/*
 * Zipfile layout declarations
 *
 */

typedef longint       signature_type;


#define local_file_header_signature  0x04034b50L

#ifdef M_I386
#pragma pack(2)
#endif

typedef struct local_file_header {
	word         version_needed_to_extract;
	word         general_purpose_bit_flag;
	word         compression_method;
	word         last_mod_file_time;
	word         last_mod_file_date;
	longint      crc32;
	longint      compressed_size;
	longint      uncompressed_size;
	word         filename_length;
	word         extra_field_length;
} local_file_header;


#define central_file_header_signature  0x02014b50L


typedef struct central_directory_file_header {
	word         version_made_by;
	word         version_needed_to_extract;
	word         general_purpose_bit_flag;
	word         compression_method;
	word         last_mod_file_time;
	word         last_mod_file_date;
	longint      crc32;
	longint      compressed_size;
	longint      uncompressed_size;
	word         filename_length;
	word         extra_field_length;
	word         file_comment_length;
	word         disk_number_start;
	word         internal_file_attributes;
	longint      external_file_attributes;
	longint      relative_offset_local_header;
} central_directory_file_header;


#define end_central_dir_signature  0x06054b50L


typedef struct end_central_dir_record {
	word         number_this_disk;
	word         number_disk_with_start_central_directory;
	word         total_entries_central_dir_on_this_disk;
	word         total_entries_central_dir;
	longint      size_central_directory;
	longint      offset_start_central_directory;
	word         zipfile_comment_length;
} end_central_dir_record;


#ifdef M_I386
#pragma pack(4)
#endif

/* ----------------------------------------------------------- */
/*
 * input file variables
 *
 */


#define  uinbufsize    512L   /* input buffer size */
byte     inbuf[uinbufsize];

boolean  zipeof;
longint  csize;
longint  cusize;
int	cmethod;
int	inpos;
int	incnt;
int	pc;
int	pcbits;
int	pcbitv;

int	zipfd;
char	zipfn[STRSIZ];
local_file_header lrec;
char **	members;

/* ----------------------------------------------------------- */
/*
 * output stream variables
 *
 */

byte     outbuf[4096];   /* for rle look-back */
longint  outpos;         /* absolute position in outfile */
int	outcnt;

int	outfd;
int	console = 0;
int	viewer = 0;
char	filename[STRSIZ];
char	extra[STRSIZ];

/* ----------------------------------------------------------- */
/*
 * shrink/reduce working storage
 *
 */
int	factor;
byte     followers[256][64];
byte     Slen[256];
int	ExState;
int	C;
int	V;
int	Len;

#define max_bits      13
#define init_bits     9
#define hsize         8192
#define first_ent     257
#define clear         256

typedef int	hsize_array_integer[hsize+1];
typedef byte hsize_array_byte[hsize+1];

hsize_array_integer prefix_of;
hsize_array_byte    suffix_of;
hsize_array_byte    stack;

int	cbits;
int	maxcode;
int	free_ent;
int	maxcodemax;
int	offset;
int	sizex;

/* ------------------------------------------------------------- */

void         skip_csize()
{
	lseek(zipfd, csize, SEEK_CUR);
	zipeof = 1;
	csize = 0L;
	incnt = 0;
}

/* ------------------------------------------------------------- */
void         ReadByte(x)
int	*	x;
{
	if (incnt == 0) {
		if (csize == 0L) {
			zipeof = 1;
			return;
		}

		inpos = sizeof(inbuf);
		if (inpos > csize)
			inpos = (int)csize;
		incnt = read(zipfd, inbuf, inpos);

		inpos = 1;
		csize -= incnt;
	}

	*x = inbuf[inpos-1];
	inpos++;
	incnt--;
}


/* ------------------------------------------------------------- */
void         ReadBits(bits, x)
int	bits;
int	*	x;
/* read the specified number of bits */
{
	int	bit;
	int	bitv;

	*x = 0;
	bitv = 1;

	for (bit = 0; bit <= bits - 1; bit++) {

		if (pcbits > 0) {
			pcbits--;
			pcbitv = pcbitv << 1;
		} else
		 {
			ReadByte(&pc);
			pcbits = 7;
			pcbitv = 1;
		}

		if ((pc & pcbitv) != 0)
			*x = *x | bitv;

		bitv = (int) (bitv << 1);
	}

}


/* ---------------------------------------------------------- */
void         get_string(len, s)
int	len;
char	*	s;
{
	read(zipfd, s, len);
	s[len] = 0;
}


/* ------------------------------------------------------------- */
void         OutByte(c)
int	c;
/* output each character from archive to screen */
{
	if (viewer) 
		return;
	outbuf[outcnt /* outpos % sizeof(outbuf) */] = c;
	outpos++;
	outcnt++;

	if (outcnt == sizeof(outbuf)) {
		write(outfd, outbuf, outcnt);
		outcnt = 0;
		if (!console) 
			fprintf(stderr, ".");
	}
}


/* ----------------------------------------------------------- */
int	reduce_L(x)
int	x;
{
	static int L_table[] = {0, 0x7f, 0x3f, 0x1f, 0x0f};

	if (factor < 1 || factor > 4)
		return 0; /* error */
	else
		return x & L_table[factor];
}



int	reduce_F(x)
int	x;
{
	static int F_table[] = {0, 127, 63, 31, 15};

	if (factor < 1 || factor > 4)
		return 0; /* error */
	else if (x == F_table[factor])
		return 2;
	else
		return 3;
}

int	reduce_D(x, y)
int	x;
int	y;
{
	static int D_shifts[] = {0, 7, 6, 5, 4};
	static int D_masks[] = {0, 0x01, 0x03, 0x07, 0x0f};

	if (factor < 1 || factor > 4)
		return 0; /* error */
	else
		return ((x >> D_shifts[factor]) & D_masks[factor])
			* 256 + y + 1;
}


int	reduce_B(x)
int	x;
/* number of bits needed to encode the specified number */
{
	register int n = x - 1;
	
	if (n == 0 || n == 1)
		return( 1 );
	else if (n < 4)
		return( 2 );
	else if (n < 8)
		return( 3 );
	else if (n < 16)
		return( 4 );
	else if (n < 32)
		return( 5 );
	else if (n < 64)
		return( 6 );
	else if (n < 128)
		return( 7 );
	else	return( 8 );

}

/* ----------------------------------------------------------- */
void         Expand(c)
int	c;
{
#define DLE           144

	switch (ExState) {

	case 0:
		if (c != DLE)
			OutByte(c);
		else
			ExState = 1;
		break;

	case 1:
		if (c != 0) {
			V = c;
			Len = reduce_L(V);
			ExState = reduce_F(Len);
		} else               {
			OutByte(DLE);
			ExState = 0;
		}
		break;

	case 2:   
		 {
			Len = Len + c;
			ExState = 3;
		}
		break;

	case 3:   
		 {
			int	i;
			longint offset = reduce_D(V, c);
			longint op = outpos - offset;

			for (i = 0; i <= Len + 2; i++) {
				if (op < 0L)
					OutByte(0);
				else
					OutByte(outbuf[(int)(op % sizeof(outbuf))]);
				op++;
			}

			ExState = 0;
		}
		break;
	}
}


/* ----------------------------------------------------------- */
void         LoadFollowers()
{
	int	x;
	int	i;
	int	b;

	for (x = 255; x >= 0; x--) {
		ReadBits(6, &b);
		Slen[x] = b;

		for (i = 0; i < Slen[x]; i++) {
			ReadBits(8, &b);
			followers[x][i] = b;
		}
	}
}



/* ----------------------------------------------------------- */
/*
 * The Reducing algorithm is actually a combination of two
 * distinct algorithms.  The first algorithm compresses repeated
 * byte sequences, and the second algorithm takes the compressed
 * stream from the first algorithm and applies a probabilistic
 * compression method.
 *
 */

void         unReduce()
/* expand probablisticly reduced data */

{

	int	lchar;
	int	lout;
	int	I;

	factor = cmethod - 1;
	if ((factor < 1) || (factor > 4)) {
		skip_csize();
		return;
	}

	ExState = 0;
	LoadFollowers();
	lchar =  0;

	while ((!zipeof) && (outpos < cusize)) {

		if (Slen[lchar] == 0)
			ReadBits(8, &lout);
		else
		 {
			ReadBits(1, &lout);
			if (lout != 0)
				ReadBits(8, &lout);
			else         {
				ReadBits(reduce_B(Slen[lchar]), &I);
				lout = followers[lchar][I];
			}
		}

		Expand(lout);
		lchar = lout;
	}
}


/* ------------------------------------------------------------- */
/*
 * Shrinking is a Dynamic Ziv-Lempel-Welch compression algorithm
 * with partial clearing.
 *
 */

void         partial_clear()
{
	int	pr;
	int	cd;


	/* mark all nodes as potentially unused */
	for (cd = first_ent; cd < free_ent; cd++)
		prefix_of[cd] |= 0x8000;


	/* unmark those that are used by other nodes */
	for (cd = first_ent; cd < free_ent; cd++) {
		pr = prefix_of[cd] & 0x7fff;   /* reference to another node? */

		if (pr >= first_ent)           /* flag node as referenced */
			prefix_of[pr] &= 0x7fff;
	}


	/* clear the ones that are still marked */
	for (cd = first_ent; cd < free_ent; cd++)
		if ((prefix_of[cd] & 0x8000) != 0)
			prefix_of[cd] = -1;


	/* find first cleared node as next free_ent */
	free_ent = first_ent;
	while ((free_ent < maxcodemax) && (prefix_of[free_ent] != -1))
		free_ent++;
}


/* ------------------------------------------------------------- */
void         unShrink()

{
	int	stackp;
	int	finchar;
	int	code;
	int	oldcode;
	int	incode;


	/* decompress the file */
	maxcodemax = 1 << max_bits;
	cbits = init_bits;
	maxcode = (1 << cbits) - 1;
	free_ent = first_ent;
	offset = 0;
	sizex = 0;

	for (code = maxcodemax; code > 255; code--)
		prefix_of[code] = -1;

	for (code = 255; code >= 0; code--) {
		prefix_of[code] = 0;
		suffix_of[code] = code;
	}

	ReadBits(cbits, &oldcode);
	if (zipeof) 
		return;
	finchar = oldcode;

	OutByte(finchar);

	stackp = 0;

	while ((!zipeof)) {
		ReadBits(cbits, &code);
		if (zipeof) 
			return;

		while (code == clear) {
			ReadBits(cbits, &code);

			switch (code) {

			case 1:   
				 {
					cbits++;
					if (cbits == max_bits)
						maxcode = maxcodemax;
					else
						maxcode = (1 << cbits) - 1;
				}
				break;

			case 2:
				partial_clear();
				break;
			}

			ReadBits(cbits, &code);
			if (zipeof) 
				return;
		}


		/* special case for KwKwK string */
		incode = code;
		if (prefix_of[code] == -1) {
			stack[stackp] = finchar;
			stackp++;
			code = oldcode;
		}


		/* generate output characters in reverse order */
		while (code >= first_ent) {
			stack[stackp] = suffix_of[code];
			stackp++;
			code = prefix_of[code];
		}

		finchar = suffix_of[code];
		stack[stackp] = finchar;
		stackp++;


		/* and put them out in forward order */
		while (stackp > 0) {
			stackp--;
			OutByte(stack[stackp]);
		}


		/* generate new entry */
		code = free_ent;
		if (code < maxcodemax) {
			prefix_of[code] = oldcode;
			suffix_of[code] = finchar;
			while ((free_ent < maxcodemax) && (prefix_of[free_ent] != -1))
				free_ent++;
		}


		/* remember previous code */
		oldcode = incode;
	}

}

/* ---------------------------------------------------------- */
void	view_member()
{
	static int	first = 1;
	static char	*compression_types[] = {
		"Stored", "Shrunk", "Reduced", "Reduced", "Reduced",
		"Reduced", "Unknown"};

	if (cmethod > 6)
		cmethod = 6;
	if (first) {
		printf("Length      Method      Size        Ratio       Name\n");
		printf("----------  ----------  ----------  -----------  --------------\n");
		first = 0;
	}
	printf("%10d  %-10s  %10d  %10d%%  %s\n",
	   cusize, compression_types[cmethod], csize,
	   100 - (csize * 100 / cusize), filename);
	skip_csize();
}


/* ---------------------------------------------------------- */
void         extract_member()
{
	int	b;


	for (b = 0; b < sizeof(outbuf); b++) 
		outbuf[b] = 0;
	pcbits = 0;
	incnt = 0;
	outpos = 0L;
	outcnt = 0;
	zipeof = 0;

	if (console)
		outfd = 1;
	else
	 {
		outfd = open(filename, O_RDWR | O_CREAT | O_TRUNC, 0666);
		if (outfd < 0) {
			fprintf(stderr, "Can't create output file: %s\n", filename);
			exit(1);
		}
	}


	switch (cmethod) {

	case 0:     /* stored */

		 {
			if (console)
				fprintf(stderr, "\nExtracting %s:\n\n", filename);
			else
				fprintf(stderr, " Extracting: %s ...", filename);
			while ((!zipeof)) {
				ReadByte(&b);
				OutByte(b);
			}
		}
		break;

	case 1:   
		 {
			if (console)
				fprintf(stderr, "\nUnShrinking %s:\n\n", filename);
			else
				fprintf(stderr, " UnShrinking: %s ...", filename);
			unShrink();
		}
		break;

	case 2:
	case 3:
	case 4:
	case 5:   
		 {
			if (console)
				fprintf(stderr, "\nExpanding %s:\n\n", filename);
			else
				fprintf(stderr, " Expanding: %s ...", filename);
			unReduce();
		}
		break;

	default: 
		fprintf(stderr, "Unknown compression method.");
		if (console) 
			fprintf(stderr, "\n\n");
		skip_csize();
	}

	if (outcnt > 0)
		write(outfd, outbuf, outcnt);



	if (!console) 
		close(outfd);
	if (!console) 
		fprintf(stderr, "  done.\n");
}


/* ---------------------------------------------------------- */
boolean	wanted(name)
char *	name;
{
	char ** mem;

	if (!*members)
		return 1;
	for (mem = members; *mem; mem++)
		if (strcmp(*mem, name) == 0)
			return 1;
	return 0;
}

/* ---------------------------------------------------------- */
void         process_local_file_header()
{
	read(zipfd, &lrec, sizeof(lrec));
	get_string(lrec.filename_length, filename);
	get_string(lrec.extra_field_length, extra);
	csize = lrec.compressed_size;
	cusize = lrec.uncompressed_size;
	cmethod = lrec.compression_method;
	if (! wanted(filename))
		skip_csize();
	else if (viewer)
		view_member();
	else
		extract_member();
}


/* ---------------------------------------------------------- */
void         process_central_file_header()
{
	central_directory_file_header rec;
	char	filename[STRSIZ];
	char	extra[STRSIZ];
	char	comment[STRSIZ];

	read(zipfd, &rec, sizeof(rec));
	get_string(rec.filename_length, filename);
	get_string(rec.extra_field_length, extra);
	get_string(rec.file_comment_length, comment);
}


/* ---------------------------------------------------------- */
void         process_end_central_dir()
{
	end_central_dir_record rec;
	char	comment[STRSIZ];

	read(zipfd, &rec, sizeof(rec));
	get_string(rec.zipfile_comment_length, comment);
}


/* ---------------------------------------------------------- */
void         process_headers()
{
	longint sig;

	while (1) {
		if (read(zipfd, &sig, sizeof(sig)) != sizeof(sig))
			return;
		else if (sig == local_file_header_signature)
			process_local_file_header();
		else if (sig == central_file_header_signature)
			process_central_file_header();
		else if (sig == end_central_dir_signature) {
			process_end_central_dir();
			return;
		} 
		    else      {
			fprintf(stderr, "Invalid Zipfile Header\n");
			return;
		}
	}

}


/* ---------------------------------------------------------- */
void         extract_zipfile()
{
	zipfd = open(zipfn, O_RDONLY);
	if (zipfd < 1) {
		fprintf(stderr, "Can't open input file: %s\n", zipfn);
		return;
	}

	process_headers();

	close(zipfd);
}


/* ---------------------------------------------------------- */
/*
 * main program
 *
 */

void main(argc, argv)
int	argc;
char	**	argv;
{
	char ** mem;
	char * p;
	fprintf(stderr, "%s\n", version);
	fprintf(stderr, "Courtesy of:  S.H.Smith  and  The Tool Shop BBS,  (602) 279-2673.\n");
	fprintf(stderr, "Unix version by John Cowan <cowan@magpie.masa.com>\n");
	fprintf(stderr, "\n");

	if (argc == 1) {
		fprintf(stderr, "usage: unzip { -c | -v } file[.zip]\n");
		exit(1);
	}

	if (strcmp(argv[1], "-c") == 0) {
		console++;
		argv++;
	}
	else if (strcmp(argv[1], "-v") == 0) {
		viewer++;
		console++;
		argv++;
	}

	strcpy(zipfn, argv[1]);
	if (strchr(zipfn, '.') == NULL)
		strcat(zipfn, ".zip");

	members = argv + 2;
	for (mem = members; *mem; mem++)
		for (p = *mem; *p; p++)
			*p = toupper(*p);
	extract_zipfile();
	exit(0);
}

