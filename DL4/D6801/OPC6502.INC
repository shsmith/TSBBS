


(**)
(*******************************************************
 *
 * Subsystem:    Opcode definitions for 6502 target machine
 *
 * Description:  This file contains the definitions of all
 *               of the basic operations generated by the
 *               general code generator.
 *
 * S.H.Smith
 *)


const

(* define instruction set and code generator version *)
   generatorversion  = '6502 Code Generator';

(* define assembler pseudo-ops *)
   op_start_module   = ' NAM ';            {start new program module}
   op_include_libs   = ' INC D6502HDR';    {include runtime libraries}
   op_end_module     = ' END ';            {end program module}
   op_comment        = '*';                {start comment character}
   op_equate         = ' EQU *';           {equate a label to current address}
   op_reserve_bytes  = ' DB ';             {reserve bytes with a label}
   op_define_bytes   = ' DS ';             {define bytes of literal data}

(* program flow control opcodes *)
   op_call           = ' JSR ';            {call subroutine}
   op_return         = ' RTS *';           {return from subroutine}
   op_jump           = ' JMP ';            {jump to label}
   op_test_zero      = ' TSTA';            {test boolean and set zero flag}
   op_jump_zero      = ' BEQ ';            {jump if zero condition}
   op_jump_not_zero  = ' BNE ';            {jump if notzero confition}

(* 'byte' and 'boolean' data type manipulation *)
   op_push_byte      = ' PSH';            {push current value}
   op_pop_byte       = ' PUL';            {pop value from stack}
   op_lit_byte       = ' LDA #';          {load literal value}
   op_load_byte      = ' LDA ';           {load from variable}
   op_store_byte     = ' STA ';           {store into variable}


(* 'integer' data type manipulation - these are hard to do in a single
   line on the 6502, which has only 8 bit registers *)

   op_push_integer   = ' TYA;PSH;TXA;PSH';
   op_pop_integer    = ' PUL;TAX;PUL;TAY';
   op_lit_integer    = ' <LDX> #';
   op_load_integer   = ' <LDX> ';
   op_store_integer  = ' <STX> ';


